/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V3AvailabilityErrorResponse struct for V3AvailabilityErrorResponse
type V3AvailabilityErrorResponse struct {
	Errors *[]V3AvailabilityError `json:"errors,omitempty"`
}

// NewV3AvailabilityErrorResponse instantiates a new V3AvailabilityErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3AvailabilityErrorResponse() *V3AvailabilityErrorResponse {
	this := V3AvailabilityErrorResponse{}
	return &this
}

// NewV3AvailabilityErrorResponseWithDefaults instantiates a new V3AvailabilityErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3AvailabilityErrorResponseWithDefaults() *V3AvailabilityErrorResponse {
	this := V3AvailabilityErrorResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V3AvailabilityErrorResponse) GetErrors() []V3AvailabilityError {
	if o == nil || o.Errors == nil {
		var ret []V3AvailabilityError
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3AvailabilityErrorResponse) GetErrorsOk() (*[]V3AvailabilityError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V3AvailabilityErrorResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V3AvailabilityError and assigns it to the Errors field.
func (o *V3AvailabilityErrorResponse) SetErrors(v []V3AvailabilityError) {
	o.Errors = &v
}

func (o V3AvailabilityErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableV3AvailabilityErrorResponse struct {
	value *V3AvailabilityErrorResponse
	isSet bool
}

func (v NullableV3AvailabilityErrorResponse) Get() *V3AvailabilityErrorResponse {
	return v.value
}

func (v *NullableV3AvailabilityErrorResponse) Set(val *V3AvailabilityErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV3AvailabilityErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV3AvailabilityErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3AvailabilityErrorResponse(val *V3AvailabilityErrorResponse) *NullableV3AvailabilityErrorResponse {
	return &NullableV3AvailabilityErrorResponse{value: val, isSet: true}
}

func (v NullableV3AvailabilityErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3AvailabilityErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


