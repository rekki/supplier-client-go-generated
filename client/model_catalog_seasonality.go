/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CatalogSeasonality struct for CatalogSeasonality
type CatalogSeasonality struct {
	// The end date when the item is in season. In ISO 8601 calendar date format YYYY-MM-DD.
	EndDate *string `json:"end_date,omitempty"`
	// The start date when the item is in season. In ISO 8601 calendar date format YYYY-MM-DD.
	StartDate *string `json:"start_date,omitempty"`
}

// NewCatalogSeasonality instantiates a new CatalogSeasonality object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogSeasonality() *CatalogSeasonality {
	this := CatalogSeasonality{}
	return &this
}

// NewCatalogSeasonalityWithDefaults instantiates a new CatalogSeasonality object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogSeasonalityWithDefaults() *CatalogSeasonality {
	this := CatalogSeasonality{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CatalogSeasonality) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSeasonality) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CatalogSeasonality) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CatalogSeasonality) SetEndDate(v string) {
	o.EndDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CatalogSeasonality) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSeasonality) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CatalogSeasonality) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CatalogSeasonality) SetStartDate(v string) {
	o.StartDate = &v
}

func (o CatalogSeasonality) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogSeasonality struct {
	value *CatalogSeasonality
	isSet bool
}

func (v NullableCatalogSeasonality) Get() *CatalogSeasonality {
	return v.value
}

func (v *NullableCatalogSeasonality) Set(val *CatalogSeasonality) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogSeasonality) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogSeasonality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogSeasonality(val *CatalogSeasonality) *NullableCatalogSeasonality {
	return &NullableCatalogSeasonality{value: val, isSet: true}
}

func (v NullableCatalogSeasonality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogSeasonality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


