/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V3UpdateSuccess struct for V3UpdateSuccess
type V3UpdateSuccess struct {
	// number of items actually updated
	Affected *int32 `json:"affected,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewV3UpdateSuccess instantiates a new V3UpdateSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3UpdateSuccess() *V3UpdateSuccess {
	this := V3UpdateSuccess{}
	return &this
}

// NewV3UpdateSuccessWithDefaults instantiates a new V3UpdateSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3UpdateSuccessWithDefaults() *V3UpdateSuccess {
	this := V3UpdateSuccess{}
	return &this
}

// GetAffected returns the Affected field value if set, zero value otherwise.
func (o *V3UpdateSuccess) GetAffected() int32 {
	if o == nil || o.Affected == nil {
		var ret int32
		return ret
	}
	return *o.Affected
}

// GetAffectedOk returns a tuple with the Affected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3UpdateSuccess) GetAffectedOk() (*int32, bool) {
	if o == nil || o.Affected == nil {
		return nil, false
	}
	return o.Affected, true
}

// HasAffected returns a boolean if a field has been set.
func (o *V3UpdateSuccess) HasAffected() bool {
	if o != nil && o.Affected != nil {
		return true
	}

	return false
}

// SetAffected gets a reference to the given int32 and assigns it to the Affected field.
func (o *V3UpdateSuccess) SetAffected(v int32) {
	o.Affected = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *V3UpdateSuccess) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3UpdateSuccess) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *V3UpdateSuccess) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *V3UpdateSuccess) SetSuccess(v bool) {
	o.Success = &v
}

func (o V3UpdateSuccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Affected != nil {
		toSerialize["affected"] = o.Affected
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableV3UpdateSuccess struct {
	value *V3UpdateSuccess
	isSet bool
}

func (v NullableV3UpdateSuccess) Get() *V3UpdateSuccess {
	return v.value
}

func (v *NullableV3UpdateSuccess) Set(val *V3UpdateSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableV3UpdateSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableV3UpdateSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3UpdateSuccess(val *V3UpdateSuccess) *NullableV3UpdateSuccess {
	return &NullableV3UpdateSuccess{value: val, isSet: true}
}

func (v NullableV3UpdateSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3UpdateSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


