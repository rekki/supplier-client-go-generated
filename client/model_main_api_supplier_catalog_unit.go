/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MainAPISupplierCatalogUnit struct for MainAPISupplierCatalogUnit
type MainAPISupplierCatalogUnit struct {
	// The order price in cents for the item per unit. For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
	PriceCents *int32 `json:"price_cents,omitempty"`
	// The number of items in stock for the related unit.
	StockCount *int32 `json:"stock_count,omitempty"`
	// A unit that the item can be ordered in.
	Unit *string `json:"unit,omitempty"`
}

// NewMainAPISupplierCatalogUnit instantiates a new MainAPISupplierCatalogUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainAPISupplierCatalogUnit() *MainAPISupplierCatalogUnit {
	this := MainAPISupplierCatalogUnit{}
	return &this
}

// NewMainAPISupplierCatalogUnitWithDefaults instantiates a new MainAPISupplierCatalogUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainAPISupplierCatalogUnitWithDefaults() *MainAPISupplierCatalogUnit {
	this := MainAPISupplierCatalogUnit{}
	return &this
}

// GetPriceCents returns the PriceCents field value if set, zero value otherwise.
func (o *MainAPISupplierCatalogUnit) GetPriceCents() int32 {
	if o == nil || o.PriceCents == nil {
		var ret int32
		return ret
	}
	return *o.PriceCents
}

// GetPriceCentsOk returns a tuple with the PriceCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainAPISupplierCatalogUnit) GetPriceCentsOk() (*int32, bool) {
	if o == nil || o.PriceCents == nil {
		return nil, false
	}
	return o.PriceCents, true
}

// HasPriceCents returns a boolean if a field has been set.
func (o *MainAPISupplierCatalogUnit) HasPriceCents() bool {
	if o != nil && o.PriceCents != nil {
		return true
	}

	return false
}

// SetPriceCents gets a reference to the given int32 and assigns it to the PriceCents field.
func (o *MainAPISupplierCatalogUnit) SetPriceCents(v int32) {
	o.PriceCents = &v
}

// GetStockCount returns the StockCount field value if set, zero value otherwise.
func (o *MainAPISupplierCatalogUnit) GetStockCount() int32 {
	if o == nil || o.StockCount == nil {
		var ret int32
		return ret
	}
	return *o.StockCount
}

// GetStockCountOk returns a tuple with the StockCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainAPISupplierCatalogUnit) GetStockCountOk() (*int32, bool) {
	if o == nil || o.StockCount == nil {
		return nil, false
	}
	return o.StockCount, true
}

// HasStockCount returns a boolean if a field has been set.
func (o *MainAPISupplierCatalogUnit) HasStockCount() bool {
	if o != nil && o.StockCount != nil {
		return true
	}

	return false
}

// SetStockCount gets a reference to the given int32 and assigns it to the StockCount field.
func (o *MainAPISupplierCatalogUnit) SetStockCount(v int32) {
	o.StockCount = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MainAPISupplierCatalogUnit) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainAPISupplierCatalogUnit) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MainAPISupplierCatalogUnit) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MainAPISupplierCatalogUnit) SetUnit(v string) {
	o.Unit = &v
}

func (o MainAPISupplierCatalogUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PriceCents != nil {
		toSerialize["price_cents"] = o.PriceCents
	}
	if o.StockCount != nil {
		toSerialize["stock_count"] = o.StockCount
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableMainAPISupplierCatalogUnit struct {
	value *MainAPISupplierCatalogUnit
	isSet bool
}

func (v NullableMainAPISupplierCatalogUnit) Get() *MainAPISupplierCatalogUnit {
	return v.value
}

func (v *NullableMainAPISupplierCatalogUnit) Set(val *MainAPISupplierCatalogUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableMainAPISupplierCatalogUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableMainAPISupplierCatalogUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainAPISupplierCatalogUnit(val *MainAPISupplierCatalogUnit) *NullableMainAPISupplierCatalogUnit {
	return &NullableMainAPISupplierCatalogUnit{value: val, isSet: true}
}

func (v NullableMainAPISupplierCatalogUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainAPISupplierCatalogUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


