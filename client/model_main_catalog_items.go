/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MainCatalogItems struct for MainCatalogItems
type MainCatalogItems struct {
	Data *[]MainAPISupplierCatalogItem `json:"data,omitempty"`
}

// NewMainCatalogItems instantiates a new MainCatalogItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainCatalogItems() *MainCatalogItems {
	this := MainCatalogItems{}
	return &this
}

// NewMainCatalogItemsWithDefaults instantiates a new MainCatalogItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainCatalogItemsWithDefaults() *MainCatalogItems {
	this := MainCatalogItems{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MainCatalogItems) GetData() []MainAPISupplierCatalogItem {
	if o == nil || o.Data == nil {
		var ret []MainAPISupplierCatalogItem
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCatalogItems) GetDataOk() (*[]MainAPISupplierCatalogItem, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MainCatalogItems) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []MainAPISupplierCatalogItem and assigns it to the Data field.
func (o *MainCatalogItems) SetData(v []MainAPISupplierCatalogItem) {
	o.Data = &v
}

func (o MainCatalogItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableMainCatalogItems struct {
	value *MainCatalogItems
	isSet bool
}

func (v NullableMainCatalogItems) Get() *MainCatalogItems {
	return v.value
}

func (v *NullableMainCatalogItems) Set(val *MainCatalogItems) {
	v.value = val
	v.isSet = true
}

func (v NullableMainCatalogItems) IsSet() bool {
	return v.isSet
}

func (v *NullableMainCatalogItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainCatalogItems(val *MainCatalogItems) *NullableMainCatalogItems {
	return &NullableMainCatalogItems{value: val, isSet: true}
}

func (v NullableMainCatalogItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainCatalogItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


