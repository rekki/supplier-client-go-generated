/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MainSetStockStatusInput struct for MainSetStockStatusInput
type MainSetStockStatusInput struct {
	Items []MainStockItemState `json:"items"`
}

// NewMainSetStockStatusInput instantiates a new MainSetStockStatusInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainSetStockStatusInput(items []MainStockItemState, ) *MainSetStockStatusInput {
	this := MainSetStockStatusInput{}
	this.Items = items
	return &this
}

// NewMainSetStockStatusInputWithDefaults instantiates a new MainSetStockStatusInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainSetStockStatusInputWithDefaults() *MainSetStockStatusInput {
	this := MainSetStockStatusInput{}
	return &this
}

// GetItems returns the Items field value
func (o *MainSetStockStatusInput) GetItems() []MainStockItemState {
	if o == nil  {
		var ret []MainStockItemState
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *MainSetStockStatusInput) GetItemsOk() (*[]MainStockItemState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *MainSetStockStatusInput) SetItems(v []MainStockItemState) {
	o.Items = v
}

func (o MainSetStockStatusInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableMainSetStockStatusInput struct {
	value *MainSetStockStatusInput
	isSet bool
}

func (v NullableMainSetStockStatusInput) Get() *MainSetStockStatusInput {
	return v.value
}

func (v *NullableMainSetStockStatusInput) Set(val *MainSetStockStatusInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMainSetStockStatusInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMainSetStockStatusInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainSetStockStatusInput(val *MainSetStockStatusInput) *NullableMainSetStockStatusInput {
	return &NullableMainSetStockStatusInput{value: val, isSet: true}
}

func (v NullableMainSetStockStatusInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainSetStockStatusInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


