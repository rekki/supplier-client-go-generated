/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MainGenericErrorResponse struct for MainGenericErrorResponse
type MainGenericErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// NewMainGenericErrorResponse instantiates a new MainGenericErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainGenericErrorResponse() *MainGenericErrorResponse {
	this := MainGenericErrorResponse{}
	return &this
}

// NewMainGenericErrorResponseWithDefaults instantiates a new MainGenericErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainGenericErrorResponseWithDefaults() *MainGenericErrorResponse {
	this := MainGenericErrorResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MainGenericErrorResponse) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainGenericErrorResponse) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MainGenericErrorResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *MainGenericErrorResponse) SetError(v string) {
	o.Error = &v
}

func (o MainGenericErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableMainGenericErrorResponse struct {
	value *MainGenericErrorResponse
	isSet bool
}

func (v NullableMainGenericErrorResponse) Get() *MainGenericErrorResponse {
	return v.value
}

func (v *NullableMainGenericErrorResponse) Set(val *MainGenericErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMainGenericErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMainGenericErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainGenericErrorResponse(val *MainGenericErrorResponse) *NullableMainGenericErrorResponse {
	return &NullableMainGenericErrorResponse{value: val, isSet: true}
}

func (v NullableMainGenericErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainGenericErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


