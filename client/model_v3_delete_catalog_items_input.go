/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V3DeleteCatalogItemsInput struct for V3DeleteCatalogItemsInput
type V3DeleteCatalogItemsInput struct {
	// Array of catalog item ids to delete
	Items *[]int32 `json:"items,omitempty"`
}

// NewV3DeleteCatalogItemsInput instantiates a new V3DeleteCatalogItemsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3DeleteCatalogItemsInput() *V3DeleteCatalogItemsInput {
	this := V3DeleteCatalogItemsInput{}
	return &this
}

// NewV3DeleteCatalogItemsInputWithDefaults instantiates a new V3DeleteCatalogItemsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3DeleteCatalogItemsInputWithDefaults() *V3DeleteCatalogItemsInput {
	this := V3DeleteCatalogItemsInput{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *V3DeleteCatalogItemsInput) GetItems() []int32 {
	if o == nil || o.Items == nil {
		var ret []int32
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3DeleteCatalogItemsInput) GetItemsOk() (*[]int32, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *V3DeleteCatalogItemsInput) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []int32 and assigns it to the Items field.
func (o *V3DeleteCatalogItemsInput) SetItems(v []int32) {
	o.Items = &v
}

func (o V3DeleteCatalogItemsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableV3DeleteCatalogItemsInput struct {
	value *V3DeleteCatalogItemsInput
	isSet bool
}

func (v NullableV3DeleteCatalogItemsInput) Get() *V3DeleteCatalogItemsInput {
	return v.value
}

func (v *NullableV3DeleteCatalogItemsInput) Set(val *V3DeleteCatalogItemsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableV3DeleteCatalogItemsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableV3DeleteCatalogItemsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3DeleteCatalogItemsInput(val *V3DeleteCatalogItemsInput) *NullableV3DeleteCatalogItemsInput {
	return &NullableV3DeleteCatalogItemsInput{value: val, isSet: true}
}

func (v NullableV3DeleteCatalogItemsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3DeleteCatalogItemsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


