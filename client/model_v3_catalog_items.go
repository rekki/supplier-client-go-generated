/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V3CatalogItems struct for V3CatalogItems
type V3CatalogItems struct {
	Data *[]V3APISupplierCatalogItem `json:"data,omitempty"`
}

// NewV3CatalogItems instantiates a new V3CatalogItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3CatalogItems() *V3CatalogItems {
	this := V3CatalogItems{}
	return &this
}

// NewV3CatalogItemsWithDefaults instantiates a new V3CatalogItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3CatalogItemsWithDefaults() *V3CatalogItems {
	this := V3CatalogItems{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V3CatalogItems) GetData() []V3APISupplierCatalogItem {
	if o == nil || o.Data == nil {
		var ret []V3APISupplierCatalogItem
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3CatalogItems) GetDataOk() (*[]V3APISupplierCatalogItem, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V3CatalogItems) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []V3APISupplierCatalogItem and assigns it to the Data field.
func (o *V3CatalogItems) SetData(v []V3APISupplierCatalogItem) {
	o.Data = &v
}

func (o V3CatalogItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableV3CatalogItems struct {
	value *V3CatalogItems
	isSet bool
}

func (v NullableV3CatalogItems) Get() *V3CatalogItems {
	return v.value
}

func (v *NullableV3CatalogItems) Set(val *V3CatalogItems) {
	v.value = val
	v.isSet = true
}

func (v NullableV3CatalogItems) IsSet() bool {
	return v.isSet
}

func (v *NullableV3CatalogItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3CatalogItems(val *V3CatalogItems) *NullableV3CatalogItems {
	return &NullableV3CatalogItems{value: val, isSet: true}
}

func (v NullableV3CatalogItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3CatalogItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


