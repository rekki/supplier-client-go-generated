openapi: 3.0.1
info:
  contact:
    email: integrations@rekki.com
  description: |
    The base URL for all API endpoints is https://api.rekki.com

    Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com
  license:
    name: All rights reserved
  title: Rekki.com Supplier API
  version: ""
servers:
- url: https://api.rekki.com/api
paths:
  /integration/v1/catalog/items:
    get:
      deprecated: true
      description: |-
        Lists all your catalog items. Sorted by creation date, with the oldest appearing first.
        No input parameters. Options for pagination and sorting direction may be introduced later.
        Response is a JSON object with a data property that contains catalog items of the authenticated supplier.
      operationId: GetCatalogItems
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.CatalogItems'
          description: OK
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get catalog items for authenticated supplier
      tags:
      - catalog
    post:
      deprecated: true
      description: |
        ### Parameters

        - **`id`**
        REKKI's ID to uniquely identify the catalog item (for REKKI internal reference).
        If `id` is specified the item will be update, if not it will attempt to insert it.
        - **`product_code`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Product code for the item that maps to the supplier's catalog.
        Suppliers can modify the product code for future orders at https://supplier.rekki.com
        - **`name`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Item name as would be defined on the customer's product list.
        - **`currency`**  <span style="font-size: 12px; font-weight: 500;">optional, default is GBP</span>
        Currency code for the price. In [ISO 4217][] three-letter format.
        - **`units_prices`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        List of units and their prices that the item can be ordered in.
        - **`units_prices.unit`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        A unit that the item can be ordered in.
        - **`units_prices.price_cents`**  <span style="font-size: 12px; font-weight: 500;">optional, default is 0</span>
        The order price in cents for the item per unit.
        For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
        - **`units_prices.stock_count`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        The number of items in stock for the related unit.
        - **`availability`**  <span style="font-size: 12px; font-weight: 500;">optional, default is "in_stock"</span>
        Availability status of the item. Can be "in_stock", "out_of_stock", or "discontinued".
        - **`description`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Short description of the item.
        - **`allergens`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of allergens for the item, if any.
        - **`allergens.type`**  <span style="font-size: 12px; font-weight: 500;">required when allergens is given</span>
        Type of allergy. For example "contains peanuts" or "may contain peanuts".
        - **`allergens.symptoms`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of symptoms for the allergy.
        - **`order_cutoff_times`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Cutt-off times are the minimum amount of time before delivery when the item can still be ordered.
        - **`order_cutoff_times.{mon,tue,wed,thu,fri,sat,sun}`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Minimum amount of time, in hours, that an item needs to be ordered in advance of delivery for the given day.
        - **`replacement_products`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of product codes for alternative items when this item is not available.
        - **`seasonality`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of date ranges when the item is in-season.
        - **`seasonality.start_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
          The start date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
          - **`seasonality.end_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
            The end date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
      operationId: UpdateCatalogItem
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.APISupplierCatalogItem'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.APISupplierCatalogItem'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Creates or Updates an item on your catalog. If item with this product_code
        already exists, you can update this item. Item is looked up by product code
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v1/catalog/items/{id}:
    delete:
      deprecated: true
      description: Delete an item from your catalog by its unique ID.
      operationId: DeleteCatalogItem
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      - description: ID of the item to retrieve. Item IDs are discoverable when listing
          items.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.SuccessConfirmation'
          description: OK
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete an item from catalog
      tags:
      - catalog
    get:
      deprecated: true
      operationId: GetCatalogItem
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      - description: ID of the item to retrieve. Item IDs are discoverable when listing
          items.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.APISupplierCatalogItem'
          description: OK
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Lists all orders placed for the supplier that were placed through REKKI.
      tags:
      - catalog
  /integration/v1/catalog/replace:
    post:
      deprecated: true
      description: |
        ### Parameters

        - **`id`**
        REKKI's ID to uniquely identify the catalog item (for REKKI internal reference).
        If `id` is specified the item will be update, if not it will attempt to insert it.
        - **`product_code`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Product code for the item that maps to the supplier's catalog.
        Suppliers can modify the product code for future orders at https://supplier.rekki.com
        - **`name`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Item name as would be defined on the customer's product list.
        - **`currency`**  <span style="font-size: 12px; font-weight: 500;">optional, default is GBP</span>
        Currency code for the price. In [ISO 4217][] three-letter format.
        - **`units_prices`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        List of units and their prices that the item can be ordered in.
        - **`units_prices.unit`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        A unit that the item can be ordered in.
        - **`units_prices.price_cents`**  <span style="font-size: 12px; font-weight: 500;">optional, default is 0</span>
        The order price in cents for the item per unit.
        For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
        - **`units_prices.stock_count`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        The number of items in stock for the related unit.
        - **`availability`**  <span style="font-size: 12px; font-weight: 500;">optional, default is "in_stock"</span>
        Availability status of the item. Can be "in_stock", "out_of_stock", or "discontinued".
        - **`description`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Short description of the item.
        - **`allergens`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of allergens for the item, if any.
        - **`allergens.type`**  <span style="font-size: 12px; font-weight: 500;">required when allergens is given</span>
        Type of allergy. For example "contains peanuts" or "may contain peanuts".
        - **`allergens.symptoms`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of symptoms for the allergy.
        - **`order_cutoff_times`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Cutt-off times are the minimum amount of time before delivery when the item can still be ordered.
        - **`order_cutoff_times.{mon,tue,wed,thu,fri,sat,sun}`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Minimum amount of time, in hours, that an item needs to be ordered in advance of delivery for the given day.
        - **`replacement_products`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of product codes for alternative items when this item is not available.
        - **`seasonality`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of date ranges when the item is in-season.
        - **`seasonality.start_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
          The start date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
          - **`seasonality.end_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
            The end date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
      operationId: ReplaceCatalog
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.ReplaceCatalogInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.SuccessConfirmation'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Drop all existing items from the catalog and upload new ones
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v1/log:
    post:
      deprecated: true
      operationId: PostLogMessage
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.LogMessage'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Post a log message for the supplier for internal debugging. There is
        no need to handle response from this endpoint
      tags:
      - general
      x-codegen-request-body-name: input
  /integration/v1/orders/confirm:
    post:
      deprecated: true
      description: |
        Notifies the buyer that the order has been acknowledged.

        Status:` 200 OK`
        Body: `{ success: true}`

        Status: `400 Conflict`
        Body: `{"error":"Order already confirmed","order_id":...}`

        Status: `400 Not Found`
        Body: `{"error":"Order not found","order_id":...}`

        in errors order_id denotes the order that failed to be confirmed

        **the processing stops at first error**
      operationId: ConfirmOrders
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.SetIntegrateOrdersInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.SetIntegrateOrdersInput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.FailedOrderError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Confirm a pending order by its reference code.
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v1/orders/list:
    post:
      deprecated: true
      description: |
        Orders are limited to max 30 days old (i.e. timestamp must be within 30 days).

        We recommend polling for orders by setting the new request timestamp to the time of the last successful request.

        After you start using the API, you should request orders since last received order's inserted_at_ts, since the API returns orders created >= of the requested timestamp, you will always get at order from which you took the timestamp in the response. This will be explained again in the provided example.

        Keep in mind that since you can have more than one order per since, you must not do since: last_order.inserted_at_ts + 1, but keep the last order you received's reference and ignore the duplicate.

        After you start using the API, you should request orders since last received order's inserted_at_ts, since the API returns orders created >= of the requested timestamp, you will **always** get at order from which you took the timestamp in the response. This will be explained again in the provided example.

        Keep in mind that since you can have more than one order per since, you must not do since: last_order.inserted_at_ts + 1, but keep the last order you received's reference and ignore the duplicate.

        ## Exaple usage

        In this JavaScript example, all orders are retrieved. Then it keeps pulling for new orders since the last order, every hour.

          ```
          const fetch = require("node-fetch");

          const sleep = function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          };

          const fetch_orders = async function(token, since) {
            let r = await fetch(
              "https://api.rekki.com/api/catalog/integration/list_orders_by_supplier",
              {
                method: "POST",
                headers: {
                  Authorization: "Bearer " + token,
                  "X-REKKI-Authorization-Type": "supplier_api_token",
                  "Content-Type": "application/json",
                  Accept: "application/json"
                },
                body: JSON.stringify({ since })
              }
            );
            return await r.json();
          };

          const poll = async function(token, last_rekki_order_time) {
            let last_order_reference = undefined;

            while (true) {
              console.log("requesting orders since " + last_rekki_order_time);
              let response = await fetch_orders(token, last_rekki_order_time);

              for (let order of response.orders) {
                if (order.reference == last_order_reference) {
                  // here is where we are ignoring the order we
                  // took the inserted_at_ts from
                  // but since we can have more orders in the same inserted_at_ts
                  // you can't just do since: inserted_at_ts+1
                  continue;
                }
                if (order.inserted_at_ts >= last_rekki_order_time) {
                  last_rekki_order_time = order.inserted_at_ts;
                  last_order_reference = order.reference;
                }

                // process(order)
                console.log(order);
              }
              await sleep(3600 * 1000); // wait 1 hour
            }
          };

          poll("XXXXXXX-XXXX-XXXX-XXXXX-XXXXXXXXXXXX", parseInt((+new Date() /1000) - 3600 * 24 * 30));
          ```
      operationId: ListOrdersBySupplier
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.OrderListInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.OrderListOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Lists all orders placed for the supplier that were placed through REKKI.
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v1/orders/list_not_integrated:
    post:
      deprecated: true
      operationId: ListNotIntegratedOrders
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.OrderListInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.OrderListOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Lists all orders placed for the supplier that were placed through REKKI
        and not marked as integrated.
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v1/orders/set_error:
    post:
      deprecated: true
      operationId: MarkIntegrationError
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.SetErrorOrderInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.SuccessConfirmation'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.FailedOrderError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Report failure to integrate an order
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v1/orders/set_integrated:
    post:
      deprecated: true
      operationId: MarkOrdersIntegrated
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.SetIntegrateOrdersInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.UpdateSuccess'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Mark orders as integrated
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v2/catalog/items/availability:
    post:
      deprecated: true
      operationId: UpdateCatalogItemAvailability
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.SetStockStatusInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.UpdateSuccess'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update availability status for one of the items in the catalog
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v3/catalog/items:
    get:
      description: |-
        Lists all your catalog items. Sorted by creation date, with the oldest appearing first.
        No input parameters. Options for pagination and sorting direction may be introduced later.
        Response is a JSON object with a data property that contains catalog items of the authenticated supplier.
      operationId: GetCatalogItemsV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.CatalogItems'
          description: OK
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get catalog items for authenticated supplier
      tags:
      - catalog
    post:
      description: |
        ### Parameters

        - **`id`**
        REKKI's ID to uniquely identify the catalog item (for REKKI internal reference).
        If `id` is specified the item will be update, if not it will attempt to insert it.
        - **`product_code`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Product code for the item that maps to the supplier's catalog.
        Suppliers can modify the product code for future orders at https://supplier.rekki.com
        - **`name`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Item name as would be defined on the customer's product list.
        - **`currency`**  <span style="font-size: 12px; font-weight: 500;">optional, default is GBP</span>
        Currency code for the price. In [ISO 4217][] three-letter format.
        - **`units_prices`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        List of units and their prices that the item can be ordered in.
        - **`units_prices.unit`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        A unit that the item can be ordered in.
        - **`units_prices.price_cents`**  <span style="font-size: 12px; font-weight: 500;">optional, default is 0</span>
        The order price in cents for the item per unit.
        For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
        - **`units_prices.stock_count`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        The number of items in stock for the related unit.
        - **`availability`**  <span style="font-size: 12px; font-weight: 500;">optional, default is "in_stock"</span>
        Availability status of the item. Can be "in_stock", "out_of_stock", or "discontinued".
        - **`description`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Short description of the item.
        - **`allergens`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of allergens for the item, if any.
        - **`allergens.type`**  <span style="font-size: 12px; font-weight: 500;">required when allergens is given</span>
        Type of allergy. For example "contains peanuts" or "may contain peanuts".
        - **`allergens.symptoms`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of symptoms for the allergy.
        - **`order_cutoff_times`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Cutt-off times are the minimum amount of time before delivery when the item can still be ordered.
        - **`order_cutoff_times.{mon,tue,wed,thu,fri,sat,sun}`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Minimum amount of time, in hours, that an item needs to be ordered in advance of delivery for the given day.
        - **`replacement_products`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of product codes for alternative items when this item is not available.
        - **`seasonality`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of date ranges when the item is in-season.
        - **`seasonality.start_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
          The start date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
          - **`seasonality.end_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
            The end date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
      operationId: UpdateCatalogItemsV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.UpdateCatalogInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.CatalogItems'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Creates or Updates multiple items on your catalog. If item with this
        product_code already exists, you can update this item. Item is looked up by
        product code
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v3/catalog/items/availability:
    post:
      operationId: UpdateCatalogItemAvailabilityV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.SetStockStatusInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.UpdateSuccess'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.AvailabilityErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update availability status for one of the items in the catalog
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v3/catalog/items/delete:
    post:
      description: Delete items from the catalog by its unique IDs.
      operationId: DeleteCatalogItemsV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.DeleteCatalogItemsInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.SuccessConfirmation'
          description: OK
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete items from catalog
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v3/catalog/items/{id}:
    get:
      operationId: GetCatalogItemV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      - description: ID of the item to retrieve. Item IDs are discoverable when listing
          items.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.APISupplierCatalogItem'
          description: OK
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.GenericErrorResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Fetch a specific catalog item by its Id.
      tags:
      - catalog
  /integration/v3/catalog/replace:
    post:
      description: |
        ### Parameters

        - **`id`**
        REKKI's ID to uniquely identify the catalog item (for REKKI internal reference).
        If `id` is specified the item will be update, if not it will attempt to insert it.
        - **`product_code`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Product code for the item that maps to the supplier's catalog.
        Suppliers can modify the product code for future orders at https://supplier.rekki.com
        - **`name`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        Item name as would be defined on the customer's product list.
        - **`currency`**  <span style="font-size: 12px; font-weight: 500;">optional, default is GBP</span>
        Currency code for the price. In [ISO 4217][] three-letter format.
        - **`units_prices`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        List of units and their prices that the item can be ordered in.
        - **`units_prices.unit`**  <span style="font-size: 12px; font-weight: 500;">required</span>
        A unit that the item can be ordered in.
        - **`units_prices.price_cents`**  <span style="font-size: 12px; font-weight: 500;">optional, default is 0</span>
        The order price in cents for the item per unit.
        For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
        - **`units_prices.stock_count`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        The number of items in stock for the related unit.
        - **`availability`**  <span style="font-size: 12px; font-weight: 500;">optional, default is "in_stock"</span>
        Availability status of the item. Can be "in_stock", "out_of_stock", or "discontinued".
        - **`description`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Short description of the item.
        - **`allergens`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of allergens for the item, if any.
        - **`allergens.type`**  <span style="font-size: 12px; font-weight: 500;">required when allergens is given</span>
        Type of allergy. For example "contains peanuts" or "may contain peanuts".
        - **`allergens.symptoms`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of symptoms for the allergy.
        - **`order_cutoff_times`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Cutt-off times are the minimum amount of time before delivery when the item can still be ordered.
        - **`order_cutoff_times.{mon,tue,wed,thu,fri,sat,sun}`**  <span style="font-size: 12px; font-weight: 500;">optional</span>
        Minimum amount of time, in hours, that an item needs to be ordered in advance of delivery for the given day.
        - **`replacement_products`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of product codes for alternative items when this item is not available.
        - **`seasonality`**   <span style="font-size: 12px; font-weight: 500;">optional</span>
        List of date ranges when the item is in-season.
        - **`seasonality.start_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
          The start date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
          - **`seasonality.end_date`**  <span style="font-size: 12px; font-weight: 500;">required when seasonality is given</span>
            The end date when the item is in season. In [ISO 8601][] calendar date format `YYYY-MM-DD`.
      operationId: ReplaceCatalogV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.ReplaceCatalogInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.SuccessConfirmation'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Drop all existing items from the catalog and upload new ones
      tags:
      - catalog
      x-codegen-request-body-name: input
  /integration/v3/log:
    post:
      operationId: PostLogMessageV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.LogMessage'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Post a log message for the supplier for internal debugging. There is
        no need to handle response from this endpoint
      tags:
      - general
      x-codegen-request-body-name: input
  /integration/v3/orders/confirm:
    post:
      description: |
        Notifies the buyer that the order has been acknowledged.

        Status:` 200 OK`
        Body: `{ success: true}`

        Status: `400 Conflict`
        Body: `{"error":"Order already confirmed","order_id":...}`

        Status: `400 Not Found`
        Body: `{"error":"Order not found","order_id":...}`

        in errors order_id denotes the order that failed to be confirmed

        **the processing stops at first error**
      operationId: ConfirmOrdersV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.ConfirmOrdersInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.ConfirmOrdersInput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.FailedOrderError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Confirm a pending order by its reference code.
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v3/orders/list:
    post:
      description: |
        **UPDATE TO REFLECT V3 CHANGES**

        Orders are limited to max 30 days old (i.e. timestamp must be within 30 days).

        We recommend polling for orders by setting the new request timestamp to the time of the last successful request.

        After you start using the API, you should request orders since last received order's inserted_at_ts, since the API returns orders created >= of the requested timestamp, you will always get at order from which you took the timestamp in the response. This will be explained again in the provided example.

        Keep in mind that since you can have more than one order per since, you must not do since: last_order.inserted_at_ts + 1, but keep the last order you received's reference and ignore the duplicate.

        After you start using the API, you should request orders since last received order's inserted_at_ts, since the API returns orders created >= of the requested timestamp, you will **always** get at order from which you took the timestamp in the response. This will be explained again in the provided example.

        Keep in mind that since you can have more than one order per since, you must not do since: last_order.inserted_at_ts + 1, but keep the last order you received's reference and ignore the duplicate.

        ## Exaple usage

        In this JavaScript example, all orders are retrieved. Then it keeps pulling for new orders since the last order, every hour.

          ```
          const fetch = require("node-fetch");

          const sleep = function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          };

          const fetch_orders = async function(token, since) {
            let r = await fetch(
              "https://api.rekki.com/api/catalog/integration/list_orders_by_supplier",
              {
                method: "POST",
                headers: {
                  Authorization: "Bearer " + token,
                  "X-REKKI-Authorization-Type": "supplier_api_token",
                  "Content-Type": "application/json",
                  Accept: "application/json"
                },
                body: JSON.stringify({ since })
              }
            );
            return await r.json();
          };

          const poll = async function(token, last_rekki_order_time) {
            let last_order_reference = undefined;

            while (true) {
              console.log("requesting orders since " + last_rekki_order_time);
              let response = await fetch_orders(token, last_rekki_order_time.toISOString());

              for (let order of response.orders) {
                if (order.reference == last_order_reference) {
                  // here is where we are ignoring the order we
                  // took the inserted_at from
                  // but since we can have more orders in the same inserted_at
                  // you can't just do since: inserted_at + 1 second
                  continue;
                }
                if (+new Date(order.inserted_at) >= +last_rekki_order_time) {
                  last_rekki_order_time = order.inserted_at;
                  last_order_reference = order.reference;
                }

                // process(order)
                console.log(order);
              }
              await sleep(3600 * 1000); // wait 1 hour
            }
          };

          let startDate = new Date()
          startDate.setDate(startDate.getDate() - 30)
          poll("XXXXXXX-XXXX-XXXX-XXXXX-XXXXXXXXXXXX", startDate)
          ```
      operationId: ListOrdersBySupplierV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.OrderListInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.OrderListOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Lists all orders placed for the supplier that were placed through REKKI.
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v3/orders/set_error:
    post:
      operationId: MarkIntegrationErrorV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.SetErrorOrderInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.SuccessConfirmation'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.FailedOrderError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Report failure to integrate an order
      tags:
      - orders
      x-codegen-request-body-name: input
  /integration/v3/orders/set_integrated:
    post:
      operationId: MarkOrdersIntegratedV3
      parameters:
      - description: Required header
        in: header
        name: X-REKKI-Authorization-Type
        required: true
        schema:
          enum:
          - supplier_api_token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v3.SetIntegratedOrdersInput'
        description: Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.UpdateSuccess'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.GenericErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Mark orders as integrated
      tags:
      - orders
      x-codegen-request-body-name: input
components:
  schemas:
    catalog.Allergen:
      example:
        symptoms:
        - symptoms
        - symptoms
        type: type
      properties:
        symptoms:
          description: List of symptoms for the allergy.
          items:
            type: string
          type: array
        type:
          description: Type of allergy. For example "contains peanuts" or "may contain
            peanuts".
          type: string
      type: object
    catalog.OrderCutoffTimes:
      example:
        thu: 5
        tue: 5
        wed: 2
        fri: 6
        mon: 1
      properties:
        fri:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        mon:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        thu:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        tue:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        wed:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
      type: object
    catalog.Seasonality:
      example:
        end_date: end_date
        start_date: start_date
      properties:
        end_date:
          description: The end date when the item is in season. In ISO 8601 calendar
            date format YYYY-MM-DD.
          type: string
        start_date:
          description: The start date when the item is in season. In ISO 8601 calendar
            date format YYYY-MM-DD.
          type: string
      type: object
    integration.Order:
      example:
        contact_name: contact_name
        delivery_address: delivery_address
        notes: notes
        customer_account_no: customer_account_no
        contact_info: contact_info
        delivery_on: 2020-06-01
        reference: reference
        location_name: location_name
        inserted_at_ts: 0
        confirmed_at: 2019-08-12T12:20:10-07:00
        inserted_at: inserted_at
        items:
        - quantity: 1.4658129805029452
          price: price
          name: name
          price_cents: 6
          id: id
          units: units
          product_code: product_code
          spec: spec
        - quantity: 1.4658129805029452
          price: price
          name: name
          price_cents: 6
          id: id
          units: units
          product_code: product_code
          spec: spec
        supplier_notes: supplier_notes
      properties:
        confirmed_at:
          description: the time at which the supplier confirmed the order (via email,
            or via the REKKI supplier app, or via the REKKI API)
          example: 2019-08-12T12:20:10-07:00
          type: string
        contact_info:
          description: the phone number or email address for the person who placed
            the order
          type: string
        contact_name:
          description: the full name of the person who placed the order
          type: string
        customer_account_no:
          description: the account number for customer within the supplier system,
            this can be setup in REKKI supplier app ( https://supplier.rekki.com ).
          type: string
        delivery_address:
          description: delivery address for this specific order (address, postcode)
          type: string
        delivery_on:
          description: expected delivery date (when users place orders they specify
            for which day it is supposed to be delivered)
          example: 2020-06-01
          type: string
        inserted_at:
          description: when was the order created by the customer (ISO date time)
          type: string
        inserted_at_ts:
          description: when was the order created by the customer (unix timestamp
            in seconds)
          type: integer
        items:
          description: items requests in this order
          items:
            $ref: '#/components/schemas/integration.OrderItem'
          type: array
        location_name:
          description: the name of the location that placed the order, can be NULL
          type: string
        notes:
          description: defined by the user at the moment of making an order and usually
            refer to that specific order (e.g. "please send fresher tomatoes")
          type: string
        reference:
          description: REKKI's order reference
          type: string
        supplier_notes:
          description: 'notes define by the user for the supplier, usually being common
            across orders (e.g.: "please use the side entrance for delivery")'
          type: string
      type: object
    integration.OrderItem:
      example:
        quantity: 1.4658129805029452
        price: price
        name: name
        price_cents: 6
        id: id
        units: units
        product_code: product_code
        spec: spec
      properties:
        id:
          description: REKKI's item id, for REKKI internal reference
          type: string
        name:
          description: item name as defined on the customer product list
          type: string
        price:
          description: the item price as set in REKKI
          type: string
        price_cents:
          description: the item price as set in REKKI, in cents
          type: integer
        product_code:
          description: |-
            product code that maps to the supplier catalog, suppliers can modify
            the product code for the future orders for this customer at https://supplier.rekki.com
          type: string
        quantity:
          description: quantity
          type: number
        spec:
          description: details/notes provided by the supplier for the item
          type: string
        units:
          description: item unit as defined on the customer product list
          type: string
      type: object
    main.APISupplierCatalogItem:
      example:
        order_cutoff_times:
          thu: 5
          tue: 5
          wed: 2
          fri: 6
          mon: 1
        replacement_products:
        - replacement_products
        - replacement_products
        name: name
        description: description
        currency: currency
        availability: availability
        id: 0
        product_code: product_code
        seasonality:
        - end_date: end_date
          start_date: start_date
        - end_date: end_date
          start_date: start_date
        units_prices:
        - unit: unit
          stock_count: 9
          price_cents: 7
        - unit: unit
          stock_count: 9
          price_cents: 7
        allergens:
        - symptoms:
          - symptoms
          - symptoms
          type: type
        - symptoms:
          - symptoms
          - symptoms
          type: type
      properties:
        allergens:
          description: List of allergens for the item, if any.
          items:
            $ref: '#/components/schemas/catalog.Allergen'
          type: array
        availability:
          description: Availability status of the item. Defaults to in_stock.
          type: string
        currency:
          description: Currency code for the price. In ISO 4217 three-letter format.
            Defaults to GBP.
          type: string
        description:
          description: Product description
          type: string
        id:
          description: REKKI's ID to uniquely identify the catalog item (for REKKI
            internal reference).
          type: integer
        name:
          description: Item name as would be defined on the customer's product list.
          type: string
        order_cutoff_times:
          $ref: '#/components/schemas/catalog.OrderCutoffTimes'
        product_code:
          description: |-
            Product code for the item that maps to the supplier's catalog.
            Suppliers can modify the product code for future orders at https://supplier.rekki.com
          type: string
        replacement_products:
          description: List of product codes for alternative items when this item
            is not available.
          items:
            type: string
          type: array
        seasonality:
          description: List of date ranges when the item is in-season.
          items:
            $ref: '#/components/schemas/catalog.Seasonality'
          type: array
        units_prices:
          description: List of units and their prices that the item can be ordered
            in.
          items:
            $ref: '#/components/schemas/main.APISupplierCatalogUnit'
          type: array
      type: object
    main.APISupplierCatalogUnit:
      example:
        unit: unit
        stock_count: 9
        price_cents: 7
      properties:
        price_cents:
          description: |-
            The order price in cents for the item per unit.
            For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
          type: integer
        stock_count:
          description: The number of items in stock for the related unit.
          type: integer
        unit:
          description: A unit that the item can be ordered in.
          type: string
      type: object
    main.CatalogItems:
      example:
        data:
        - order_cutoff_times:
            thu: 5
            tue: 5
            wed: 2
            fri: 6
            mon: 1
          replacement_products:
          - replacement_products
          - replacement_products
          name: name
          description: description
          currency: currency
          availability: availability
          id: 0
          product_code: product_code
          seasonality:
          - end_date: end_date
            start_date: start_date
          - end_date: end_date
            start_date: start_date
          units_prices:
          - unit: unit
            stock_count: 9
            price_cents: 7
          - unit: unit
            stock_count: 9
            price_cents: 7
          allergens:
          - symptoms:
            - symptoms
            - symptoms
            type: type
          - symptoms:
            - symptoms
            - symptoms
            type: type
        - order_cutoff_times:
            thu: 5
            tue: 5
            wed: 2
            fri: 6
            mon: 1
          replacement_products:
          - replacement_products
          - replacement_products
          name: name
          description: description
          currency: currency
          availability: availability
          id: 0
          product_code: product_code
          seasonality:
          - end_date: end_date
            start_date: start_date
          - end_date: end_date
            start_date: start_date
          units_prices:
          - unit: unit
            stock_count: 9
            price_cents: 7
          - unit: unit
            stock_count: 9
            price_cents: 7
          allergens:
          - symptoms:
            - symptoms
            - symptoms
            type: type
          - symptoms:
            - symptoms
            - symptoms
            type: type
      properties:
        data:
          items:
            $ref: '#/components/schemas/main.APISupplierCatalogItem'
          type: array
      type: object
    main.FailedOrderError:
      properties:
        error:
          type: string
        order_id:
          properties: {}
          type: object
      type: object
    main.GenericErrorResponse:
      properties:
        error:
          type: string
      type: object
    main.LogMessage:
      properties:
        level:
          description: 'possible values are: "panic", "error", "fatal", "warn", "warning",
            "info", "debug", "trace"'
          type: string
        message:
          type: string
      type: object
    main.OrderListInput:
      properties:
        since:
          description: Filters orders created at or after the given unix timestamp
            (in seconds)
          example: 1565610869
          type: integer
      type: object
    main.OrderListOutput:
      example:
        orders:
        - contact_name: contact_name
          delivery_address: delivery_address
          notes: notes
          customer_account_no: customer_account_no
          contact_info: contact_info
          delivery_on: 2020-06-01
          reference: reference
          location_name: location_name
          inserted_at_ts: 0
          confirmed_at: 2019-08-12T12:20:10-07:00
          inserted_at: inserted_at
          items:
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          supplier_notes: supplier_notes
        - contact_name: contact_name
          delivery_address: delivery_address
          notes: notes
          customer_account_no: customer_account_no
          contact_info: contact_info
          delivery_on: 2020-06-01
          reference: reference
          location_name: location_name
          inserted_at_ts: 0
          confirmed_at: 2019-08-12T12:20:10-07:00
          inserted_at: inserted_at
          items:
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          supplier_notes: supplier_notes
      properties:
        orders:
          description: list of not integrated orders
          items:
            $ref: '#/components/schemas/integration.Order'
          type: array
      type: object
    main.ReplaceCatalogInput:
      properties:
        data:
          description: items to insert
          items:
            $ref: '#/components/schemas/main.APISupplierCatalogItem'
          type: array
      type: object
    main.SetErrorOrderInput:
      properties:
        attempts:
          description: Number of attempts made to push the integration
          type: integer
        error:
          description: error message
          type: string
        order:
          $ref: '#/components/schemas/integration.Order'
      type: object
    main.SetIntegrateOrdersInput:
      example:
        orders:
        - '{}'
        - '{}'
      properties:
        orders:
          description: Array of References of the orders to confirm, required. Order
            refs are discoverable when listing orders.
          items:
            properties: {}
            type: object
          type: array
      type: object
    main.SetStockStatusInput:
      properties:
        items:
          items:
            $ref: '#/components/schemas/main.StockItemState'
          type: array
      required:
      - items
      type: object
    main.StockItemState:
      properties:
        availability:
          description: only possible values are `in_stock` or `out_of_stock`
          type: string
        product_code:
          type: string
      required:
      - availability
      - product_code
      type: object
    main.SuccessConfirmation:
      example:
        success: true
      properties:
        success:
          example: true
          type: boolean
      type: object
    main.UpdateSuccess:
      example:
        success: true
        affected: 0
      properties:
        affected:
          description: number of items actually updated
          type: integer
        success:
          example: true
          type: boolean
      type: object
    v3.APISupplierCatalogItem:
      example:
        order_cutoff_times:
          thu: 5
          tue: 5
          wed: 2
          fri: 6
          mon: 1
        replacement_products:
        - replacement_products
        - replacement_products
        name: name
        description: description
        currency: currency
        availability: availability
        id: 0
        product_code: product_code
        seasonality:
        - end_date: end_date
          start_date: start_date
        - end_date: end_date
          start_date: start_date
        units_prices:
        - unit: unit
          stock_count: 9
          price_cents: 7
        - unit: unit
          stock_count: 9
          price_cents: 7
        allergens:
        - symptoms:
          - symptoms
          - symptoms
          type: type
        - symptoms:
          - symptoms
          - symptoms
          type: type
      properties:
        allergens:
          description: List of allergens for the item, if any.
          items:
            $ref: '#/components/schemas/v3.Allergens'
          type: array
        availability:
          description: Availability status of the item. Defaults to in_stock.
          type: string
        currency:
          description: Currency code for the price. In ISO 4217 three-letter format.
            Defaults to GBP.
          type: string
        description:
          description: Product description
          type: string
        id:
          description: REKKI's ID to uniquely identify the catalog item (for REKKI
            internal reference).
          type: integer
        name:
          description: Item name as would be defined on the customer's product list.
          type: string
        order_cutoff_times:
          $ref: '#/components/schemas/v3.OrderCutoffTimes'
        product_code:
          description: |-
            Product code for the item that maps to the supplier's catalog.
            Suppliers can modify the product code for future orders at https://supplier.rekki.com
          type: string
        replacement_products:
          description: List of product codes for alternative items when this item
            is not available.
          items:
            type: string
          type: array
        seasonality:
          description: List of date ranges when the item is in-season.
          items:
            $ref: '#/components/schemas/v3.Seasonality'
          type: array
        units_prices:
          description: List of units and their prices that the item can be ordered
            in.
          items:
            $ref: '#/components/schemas/v3.APISupplierCatalogUnit'
          type: array
      type: object
    v3.APISupplierCatalogUnit:
      example:
        unit: unit
        stock_count: 9
        price_cents: 7
      properties:
        price_cents:
          description: |-
            The order price in cents for the item per unit.
            For example, a currency of GBP with unit 5L and price 850 means a 5L item can be ordered for Â£8.50.
          type: integer
        stock_count:
          description: The number of items in stock for the related unit.
          type: integer
        unit:
          description: A unit that the item can be ordered in.
          type: string
      type: object
    v3.Allergens:
      example:
        symptoms:
        - symptoms
        - symptoms
        type: type
      properties:
        symptoms:
          description: List of symptoms for the allergy.
          items:
            type: string
          type: array
        type:
          description: Type of allergy. For example "contains peanuts" or "may contain
            peanuts".
          type: string
      type: object
    v3.AvailabilityError:
      properties:
        error:
          type: string
        item:
          $ref: '#/components/schemas/v3.StockItemState'
      type: object
    v3.AvailabilityErrorResponse:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/v3.AvailabilityError'
          type: array
      type: object
    v3.CatalogItems:
      example:
        data:
        - order_cutoff_times:
            thu: 5
            tue: 5
            wed: 2
            fri: 6
            mon: 1
          replacement_products:
          - replacement_products
          - replacement_products
          name: name
          description: description
          currency: currency
          availability: availability
          id: 0
          product_code: product_code
          seasonality:
          - end_date: end_date
            start_date: start_date
          - end_date: end_date
            start_date: start_date
          units_prices:
          - unit: unit
            stock_count: 9
            price_cents: 7
          - unit: unit
            stock_count: 9
            price_cents: 7
          allergens:
          - symptoms:
            - symptoms
            - symptoms
            type: type
          - symptoms:
            - symptoms
            - symptoms
            type: type
        - order_cutoff_times:
            thu: 5
            tue: 5
            wed: 2
            fri: 6
            mon: 1
          replacement_products:
          - replacement_products
          - replacement_products
          name: name
          description: description
          currency: currency
          availability: availability
          id: 0
          product_code: product_code
          seasonality:
          - end_date: end_date
            start_date: start_date
          - end_date: end_date
            start_date: start_date
          units_prices:
          - unit: unit
            stock_count: 9
            price_cents: 7
          - unit: unit
            stock_count: 9
            price_cents: 7
          allergens:
          - symptoms:
            - symptoms
            - symptoms
            type: type
          - symptoms:
            - symptoms
            - symptoms
            type: type
      properties:
        data:
          items:
            $ref: '#/components/schemas/v3.APISupplierCatalogItem'
          type: array
      type: object
    v3.ConfirmOrdersInput:
      example:
        orders:
        - orders
        - orders
      properties:
        orders:
          description: Array of References of the orders to confirm, required. Order
            refs are discoverable when listing orders.
          items:
            type: string
          type: array
      type: object
    v3.DeleteCatalogItemsInput:
      properties:
        items:
          description: Array of catalog item ids to delete
          items:
            type: integer
          type: array
      type: object
    v3.DeliveryAddress:
      example:
        country: country
        address: address
        city: city
        postcode: postcode
      properties:
        address:
          type: string
        city:
          type: string
        country:
          type: string
        postcode:
          type: string
      type: object
    v3.FailedOrderError:
      properties:
        error:
          type: string
        order_id:
          type: string
      type: object
    v3.GenericErrorResponse:
      properties:
        error:
          type: string
      type: object
    v3.LogMessage:
      properties:
        level:
          description: 'possible values are: "panic", "error", "fatal", "warn", "warning",
            "info", "debug", "trace"'
          type: string
        message:
          type: string
      type: object
    v3.Order:
      example:
        contact_name: contact_name
        delivery_address:
          country: country
          address: address
          city: city
          postcode: postcode
        notes: notes
        customer_account_no: customer_account_no
        contact_info: contact_info
        delivery_on: 2020-06-01
        reference: reference
        location_name: location_name
        inserted_at_ts: 0
        confirmed_at: 2019-08-12T12:20:10-07:00
        inserted_at: inserted_at
        items:
        - quantity: 1.4658129805029452
          price: price
          name: name
          price_cents: 6
          id: id
          units: units
          product_code: product_code
          spec: spec
        - quantity: 1.4658129805029452
          price: price
          name: name
          price_cents: 6
          id: id
          units: units
          product_code: product_code
          spec: spec
        supplier_notes: supplier_notes
      properties:
        confirmed_at:
          description: the time at which the supplier confirmed the order (via email,
            or via the REKKI supplier app, or via the REKKI API)
          example: 2019-08-12T12:20:10-07:00
          type: string
        contact_info:
          description: the phone number or email address for the person who placed
            the order
          type: string
        contact_name:
          description: the full name of the person who placed the order
          type: string
        customer_account_no:
          description: the account number for customer within the supplier system,
            this can be setup in REKKI supplier app ( https://supplier.rekki.com ).
          type: string
        delivery_address:
          $ref: '#/components/schemas/v3.DeliveryAddress'
        delivery_on:
          description: expected delivery date (when users place orders they specify
            for which day it is supposed to be delivered)
          example: 2020-06-01
          type: string
        inserted_at:
          description: when was the order created by the customer (ISO date time)
          type: string
        inserted_at_ts:
          description: when was the order created by the customer (unix timestamp
            in seconds)
          type: integer
        items:
          description: items requests in this order
          items:
            $ref: '#/components/schemas/integration.OrderItem'
          type: array
        location_name:
          description: the name of the location that placed the order, can be NULL
          type: string
        notes:
          description: defined by the user at the moment of making an order and usually
            refer to that specific order (e.g. "please send fresher tomatoes")
          type: string
        reference:
          description: REKKI's order reference
          type: string
        supplier_notes:
          description: 'notes define by the user for the supplier, usually being common
            across orders (e.g.: "please use the side entrance for delivery")'
          type: string
      type: object
    v3.OrderCutoffTimes:
      example:
        thu: 5
        tue: 5
        wed: 2
        fri: 6
        mon: 1
      properties:
        fri:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        mon:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        thu:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        tue:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
        wed:
          description: Minimum amount of time, in hours, that an item needs to be
            ordered in advance of delivery for the given day.
          type: integer
      type: object
    v3.OrderIntegrationError:
      properties:
        attempts:
          description: Number of attempts made to push the integration
          type: integer
        error:
          description: error message
          type: string
        reference:
          description: Order reference
          type: string
      type: object
    v3.OrderListInput:
      properties:
        since:
          description: Filters orders created at or after the given unix timestamp
            (in seconds)
          example: 2006-01-02T15:04:05-07:00
          type: string
        skip_integrated:
          default: false
          description: Only fetch orders that were not marked as integrated
          type: boolean
      type: object
    v3.OrderListOutput:
      example:
        orders:
        - contact_name: contact_name
          delivery_address:
            country: country
            address: address
            city: city
            postcode: postcode
          notes: notes
          customer_account_no: customer_account_no
          contact_info: contact_info
          delivery_on: 2020-06-01
          reference: reference
          location_name: location_name
          inserted_at_ts: 0
          confirmed_at: 2019-08-12T12:20:10-07:00
          inserted_at: inserted_at
          items:
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          supplier_notes: supplier_notes
        - contact_name: contact_name
          delivery_address:
            country: country
            address: address
            city: city
            postcode: postcode
          notes: notes
          customer_account_no: customer_account_no
          contact_info: contact_info
          delivery_on: 2020-06-01
          reference: reference
          location_name: location_name
          inserted_at_ts: 0
          confirmed_at: 2019-08-12T12:20:10-07:00
          inserted_at: inserted_at
          items:
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          - quantity: 1.4658129805029452
            price: price
            name: name
            price_cents: 6
            id: id
            units: units
            product_code: product_code
            spec: spec
          supplier_notes: supplier_notes
      properties:
        orders:
          description: list of not integrated orders
          items:
            $ref: '#/components/schemas/v3.Order'
          type: array
      type: object
    v3.ReplaceCatalogInput:
      properties:
        data:
          description: items to insert
          items:
            $ref: '#/components/schemas/v3.APISupplierCatalogItem'
          type: array
      type: object
    v3.Seasonality:
      example:
        end_date: end_date
        start_date: start_date
      properties:
        end_date:
          description: The end date when the item is in season. In ISO 8601 calendar
            date format YYYY-MM-DD.
          type: string
        start_date:
          description: The start date when the item is in season. In ISO 8601 calendar
            date format YYYY-MM-DD.
          type: string
      type: object
    v3.SetErrorOrderInput:
      properties:
        orders:
          description: list of orders failed to integrate, required
          items:
            $ref: '#/components/schemas/v3.OrderIntegrationError'
          type: array
      type: object
    v3.SetIntegratedOrdersInput:
      properties:
        orders:
          description: Array of References of the orders to mark as integrated, required.
            Order refs are discoverable when listing orders.
          items:
            type: string
          type: array
      type: object
    v3.SetStockStatusInput:
      properties:
        items:
          items:
            $ref: '#/components/schemas/v3.StockItemState'
          type: array
      required:
      - items
      type: object
    v3.StockItemState:
      properties:
        availability:
          description: only possible values are `in_stock` or `out_of_stock`
          type: string
        product_code:
          type: string
      required:
      - availability
      - product_code
      type: object
    v3.SuccessConfirmation:
      example:
        success: true
      properties:
        success:
          example: true
          type: boolean
      type: object
    v3.UpdateCatalogInput:
      properties:
        data:
          items:
            $ref: '#/components/schemas/v3.APISupplierCatalogItem'
          type: array
      type: object
    v3.UpdateSuccess:
      example:
        success: true
        affected: 0
      properties:
        affected:
          description: number of items actually updated
          type: integer
        success:
          example: true
          type: boolean
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
