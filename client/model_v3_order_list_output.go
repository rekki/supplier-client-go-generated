/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V3OrderListOutput struct for V3OrderListOutput
type V3OrderListOutput struct {
	// list of not integrated orders
	Orders *[]V3Order `json:"orders,omitempty"`
}

// NewV3OrderListOutput instantiates a new V3OrderListOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3OrderListOutput() *V3OrderListOutput {
	this := V3OrderListOutput{}
	return &this
}

// NewV3OrderListOutputWithDefaults instantiates a new V3OrderListOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3OrderListOutputWithDefaults() *V3OrderListOutput {
	this := V3OrderListOutput{}
	return &this
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *V3OrderListOutput) GetOrders() []V3Order {
	if o == nil || o.Orders == nil {
		var ret []V3Order
		return ret
	}
	return *o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3OrderListOutput) GetOrdersOk() (*[]V3Order, bool) {
	if o == nil || o.Orders == nil {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *V3OrderListOutput) HasOrders() bool {
	if o != nil && o.Orders != nil {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []V3Order and assigns it to the Orders field.
func (o *V3OrderListOutput) SetOrders(v []V3Order) {
	o.Orders = &v
}

func (o V3OrderListOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Orders != nil {
		toSerialize["orders"] = o.Orders
	}
	return json.Marshal(toSerialize)
}

type NullableV3OrderListOutput struct {
	value *V3OrderListOutput
	isSet bool
}

func (v NullableV3OrderListOutput) Get() *V3OrderListOutput {
	return v.value
}

func (v *NullableV3OrderListOutput) Set(val *V3OrderListOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableV3OrderListOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableV3OrderListOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3OrderListOutput(val *V3OrderListOutput) *NullableV3OrderListOutput {
	return &NullableV3OrderListOutput{value: val, isSet: true}
}

func (v NullableV3OrderListOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3OrderListOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


