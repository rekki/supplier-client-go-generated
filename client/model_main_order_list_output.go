/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MainOrderListOutput struct for MainOrderListOutput
type MainOrderListOutput struct {
	// list of not integrated orders
	Orders *[]IntegrationOrder `json:"orders,omitempty"`
}

// NewMainOrderListOutput instantiates a new MainOrderListOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainOrderListOutput() *MainOrderListOutput {
	this := MainOrderListOutput{}
	return &this
}

// NewMainOrderListOutputWithDefaults instantiates a new MainOrderListOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainOrderListOutputWithDefaults() *MainOrderListOutput {
	this := MainOrderListOutput{}
	return &this
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *MainOrderListOutput) GetOrders() []IntegrationOrder {
	if o == nil || o.Orders == nil {
		var ret []IntegrationOrder
		return ret
	}
	return *o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainOrderListOutput) GetOrdersOk() (*[]IntegrationOrder, bool) {
	if o == nil || o.Orders == nil {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *MainOrderListOutput) HasOrders() bool {
	if o != nil && o.Orders != nil {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []IntegrationOrder and assigns it to the Orders field.
func (o *MainOrderListOutput) SetOrders(v []IntegrationOrder) {
	o.Orders = &v
}

func (o MainOrderListOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Orders != nil {
		toSerialize["orders"] = o.Orders
	}
	return json.Marshal(toSerialize)
}

type NullableMainOrderListOutput struct {
	value *MainOrderListOutput
	isSet bool
}

func (v NullableMainOrderListOutput) Get() *MainOrderListOutput {
	return v.value
}

func (v *NullableMainOrderListOutput) Set(val *MainOrderListOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableMainOrderListOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableMainOrderListOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainOrderListOutput(val *MainOrderListOutput) *NullableMainOrderListOutput {
	return &NullableMainOrderListOutput{value: val, isSet: true}
}

func (v NullableMainOrderListOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainOrderListOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


