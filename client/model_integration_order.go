/*
 * Rekki.com Supplier API
 *
 * The base URL for all API endpoints is https://api.rekki.com  Api key value contains of word Bearer together with api key that you can get from integrations@rekki.com 
 *
 * API version: 
 * Contact: integrations@rekki.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IntegrationOrder struct for IntegrationOrder
type IntegrationOrder struct {
	// the time at which the supplier confirmed the order (via email, or via the REKKI supplier app, or via the REKKI API)
	ConfirmedAt *string `json:"confirmed_at,omitempty"`
	// the phone number or email address for the person who placed the order
	ContactInfo *string `json:"contact_info,omitempty"`
	// the full name of the person who placed the order
	ContactName *string `json:"contact_name,omitempty"`
	// the account number for customer within the supplier system, this can be setup in REKKI supplier app ( https://supplier.rekki.com ).
	CustomerAccountNo *string `json:"customer_account_no,omitempty"`
	// delivery address for this specific order (address, postcode)
	DeliveryAddress *string `json:"delivery_address,omitempty"`
	// expected delivery date (when users place orders they specify for which day it is supposed to be delivered)
	DeliveryOn *string `json:"delivery_on,omitempty"`
	// when was the order created by the customer (ISO date time)
	InsertedAt *string `json:"inserted_at,omitempty"`
	// when was the order created by the customer (unix timestamp in seconds)
	InsertedAtTs *int32 `json:"inserted_at_ts,omitempty"`
	// items requests in this order
	Items *[]IntegrationOrderItem `json:"items,omitempty"`
	// the name of the location that placed the order, can be NULL
	LocationName *string `json:"location_name,omitempty"`
	// defined by the user at the moment of making an order and usually refer to that specific order (e.g. \"please send fresher tomatoes\")
	Notes *string `json:"notes,omitempty"`
	// REKKI's order reference
	Reference *string `json:"reference,omitempty"`
	// notes define by the user for the supplier, usually being common across orders (e.g.: \"please use the side entrance for delivery\")
	SupplierNotes *string `json:"supplier_notes,omitempty"`
}

// NewIntegrationOrder instantiates a new IntegrationOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationOrder() *IntegrationOrder {
	this := IntegrationOrder{}
	return &this
}

// NewIntegrationOrderWithDefaults instantiates a new IntegrationOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationOrderWithDefaults() *IntegrationOrder {
	this := IntegrationOrder{}
	return &this
}

// GetConfirmedAt returns the ConfirmedAt field value if set, zero value otherwise.
func (o *IntegrationOrder) GetConfirmedAt() string {
	if o == nil || o.ConfirmedAt == nil {
		var ret string
		return ret
	}
	return *o.ConfirmedAt
}

// GetConfirmedAtOk returns a tuple with the ConfirmedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetConfirmedAtOk() (*string, bool) {
	if o == nil || o.ConfirmedAt == nil {
		return nil, false
	}
	return o.ConfirmedAt, true
}

// HasConfirmedAt returns a boolean if a field has been set.
func (o *IntegrationOrder) HasConfirmedAt() bool {
	if o != nil && o.ConfirmedAt != nil {
		return true
	}

	return false
}

// SetConfirmedAt gets a reference to the given string and assigns it to the ConfirmedAt field.
func (o *IntegrationOrder) SetConfirmedAt(v string) {
	o.ConfirmedAt = &v
}

// GetContactInfo returns the ContactInfo field value if set, zero value otherwise.
func (o *IntegrationOrder) GetContactInfo() string {
	if o == nil || o.ContactInfo == nil {
		var ret string
		return ret
	}
	return *o.ContactInfo
}

// GetContactInfoOk returns a tuple with the ContactInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetContactInfoOk() (*string, bool) {
	if o == nil || o.ContactInfo == nil {
		return nil, false
	}
	return o.ContactInfo, true
}

// HasContactInfo returns a boolean if a field has been set.
func (o *IntegrationOrder) HasContactInfo() bool {
	if o != nil && o.ContactInfo != nil {
		return true
	}

	return false
}

// SetContactInfo gets a reference to the given string and assigns it to the ContactInfo field.
func (o *IntegrationOrder) SetContactInfo(v string) {
	o.ContactInfo = &v
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *IntegrationOrder) GetContactName() string {
	if o == nil || o.ContactName == nil {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetContactNameOk() (*string, bool) {
	if o == nil || o.ContactName == nil {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *IntegrationOrder) HasContactName() bool {
	if o != nil && o.ContactName != nil {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *IntegrationOrder) SetContactName(v string) {
	o.ContactName = &v
}

// GetCustomerAccountNo returns the CustomerAccountNo field value if set, zero value otherwise.
func (o *IntegrationOrder) GetCustomerAccountNo() string {
	if o == nil || o.CustomerAccountNo == nil {
		var ret string
		return ret
	}
	return *o.CustomerAccountNo
}

// GetCustomerAccountNoOk returns a tuple with the CustomerAccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetCustomerAccountNoOk() (*string, bool) {
	if o == nil || o.CustomerAccountNo == nil {
		return nil, false
	}
	return o.CustomerAccountNo, true
}

// HasCustomerAccountNo returns a boolean if a field has been set.
func (o *IntegrationOrder) HasCustomerAccountNo() bool {
	if o != nil && o.CustomerAccountNo != nil {
		return true
	}

	return false
}

// SetCustomerAccountNo gets a reference to the given string and assigns it to the CustomerAccountNo field.
func (o *IntegrationOrder) SetCustomerAccountNo(v string) {
	o.CustomerAccountNo = &v
}

// GetDeliveryAddress returns the DeliveryAddress field value if set, zero value otherwise.
func (o *IntegrationOrder) GetDeliveryAddress() string {
	if o == nil || o.DeliveryAddress == nil {
		var ret string
		return ret
	}
	return *o.DeliveryAddress
}

// GetDeliveryAddressOk returns a tuple with the DeliveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetDeliveryAddressOk() (*string, bool) {
	if o == nil || o.DeliveryAddress == nil {
		return nil, false
	}
	return o.DeliveryAddress, true
}

// HasDeliveryAddress returns a boolean if a field has been set.
func (o *IntegrationOrder) HasDeliveryAddress() bool {
	if o != nil && o.DeliveryAddress != nil {
		return true
	}

	return false
}

// SetDeliveryAddress gets a reference to the given string and assigns it to the DeliveryAddress field.
func (o *IntegrationOrder) SetDeliveryAddress(v string) {
	o.DeliveryAddress = &v
}

// GetDeliveryOn returns the DeliveryOn field value if set, zero value otherwise.
func (o *IntegrationOrder) GetDeliveryOn() string {
	if o == nil || o.DeliveryOn == nil {
		var ret string
		return ret
	}
	return *o.DeliveryOn
}

// GetDeliveryOnOk returns a tuple with the DeliveryOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetDeliveryOnOk() (*string, bool) {
	if o == nil || o.DeliveryOn == nil {
		return nil, false
	}
	return o.DeliveryOn, true
}

// HasDeliveryOn returns a boolean if a field has been set.
func (o *IntegrationOrder) HasDeliveryOn() bool {
	if o != nil && o.DeliveryOn != nil {
		return true
	}

	return false
}

// SetDeliveryOn gets a reference to the given string and assigns it to the DeliveryOn field.
func (o *IntegrationOrder) SetDeliveryOn(v string) {
	o.DeliveryOn = &v
}

// GetInsertedAt returns the InsertedAt field value if set, zero value otherwise.
func (o *IntegrationOrder) GetInsertedAt() string {
	if o == nil || o.InsertedAt == nil {
		var ret string
		return ret
	}
	return *o.InsertedAt
}

// GetInsertedAtOk returns a tuple with the InsertedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetInsertedAtOk() (*string, bool) {
	if o == nil || o.InsertedAt == nil {
		return nil, false
	}
	return o.InsertedAt, true
}

// HasInsertedAt returns a boolean if a field has been set.
func (o *IntegrationOrder) HasInsertedAt() bool {
	if o != nil && o.InsertedAt != nil {
		return true
	}

	return false
}

// SetInsertedAt gets a reference to the given string and assigns it to the InsertedAt field.
func (o *IntegrationOrder) SetInsertedAt(v string) {
	o.InsertedAt = &v
}

// GetInsertedAtTs returns the InsertedAtTs field value if set, zero value otherwise.
func (o *IntegrationOrder) GetInsertedAtTs() int32 {
	if o == nil || o.InsertedAtTs == nil {
		var ret int32
		return ret
	}
	return *o.InsertedAtTs
}

// GetInsertedAtTsOk returns a tuple with the InsertedAtTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetInsertedAtTsOk() (*int32, bool) {
	if o == nil || o.InsertedAtTs == nil {
		return nil, false
	}
	return o.InsertedAtTs, true
}

// HasInsertedAtTs returns a boolean if a field has been set.
func (o *IntegrationOrder) HasInsertedAtTs() bool {
	if o != nil && o.InsertedAtTs != nil {
		return true
	}

	return false
}

// SetInsertedAtTs gets a reference to the given int32 and assigns it to the InsertedAtTs field.
func (o *IntegrationOrder) SetInsertedAtTs(v int32) {
	o.InsertedAtTs = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *IntegrationOrder) GetItems() []IntegrationOrderItem {
	if o == nil || o.Items == nil {
		var ret []IntegrationOrderItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetItemsOk() (*[]IntegrationOrderItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *IntegrationOrder) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []IntegrationOrderItem and assigns it to the Items field.
func (o *IntegrationOrder) SetItems(v []IntegrationOrderItem) {
	o.Items = &v
}

// GetLocationName returns the LocationName field value if set, zero value otherwise.
func (o *IntegrationOrder) GetLocationName() string {
	if o == nil || o.LocationName == nil {
		var ret string
		return ret
	}
	return *o.LocationName
}

// GetLocationNameOk returns a tuple with the LocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetLocationNameOk() (*string, bool) {
	if o == nil || o.LocationName == nil {
		return nil, false
	}
	return o.LocationName, true
}

// HasLocationName returns a boolean if a field has been set.
func (o *IntegrationOrder) HasLocationName() bool {
	if o != nil && o.LocationName != nil {
		return true
	}

	return false
}

// SetLocationName gets a reference to the given string and assigns it to the LocationName field.
func (o *IntegrationOrder) SetLocationName(v string) {
	o.LocationName = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *IntegrationOrder) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *IntegrationOrder) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *IntegrationOrder) SetNotes(v string) {
	o.Notes = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *IntegrationOrder) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *IntegrationOrder) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *IntegrationOrder) SetReference(v string) {
	o.Reference = &v
}

// GetSupplierNotes returns the SupplierNotes field value if set, zero value otherwise.
func (o *IntegrationOrder) GetSupplierNotes() string {
	if o == nil || o.SupplierNotes == nil {
		var ret string
		return ret
	}
	return *o.SupplierNotes
}

// GetSupplierNotesOk returns a tuple with the SupplierNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetSupplierNotesOk() (*string, bool) {
	if o == nil || o.SupplierNotes == nil {
		return nil, false
	}
	return o.SupplierNotes, true
}

// HasSupplierNotes returns a boolean if a field has been set.
func (o *IntegrationOrder) HasSupplierNotes() bool {
	if o != nil && o.SupplierNotes != nil {
		return true
	}

	return false
}

// SetSupplierNotes gets a reference to the given string and assigns it to the SupplierNotes field.
func (o *IntegrationOrder) SetSupplierNotes(v string) {
	o.SupplierNotes = &v
}

func (o IntegrationOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfirmedAt != nil {
		toSerialize["confirmed_at"] = o.ConfirmedAt
	}
	if o.ContactInfo != nil {
		toSerialize["contact_info"] = o.ContactInfo
	}
	if o.ContactName != nil {
		toSerialize["contact_name"] = o.ContactName
	}
	if o.CustomerAccountNo != nil {
		toSerialize["customer_account_no"] = o.CustomerAccountNo
	}
	if o.DeliveryAddress != nil {
		toSerialize["delivery_address"] = o.DeliveryAddress
	}
	if o.DeliveryOn != nil {
		toSerialize["delivery_on"] = o.DeliveryOn
	}
	if o.InsertedAt != nil {
		toSerialize["inserted_at"] = o.InsertedAt
	}
	if o.InsertedAtTs != nil {
		toSerialize["inserted_at_ts"] = o.InsertedAtTs
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.LocationName != nil {
		toSerialize["location_name"] = o.LocationName
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.SupplierNotes != nil {
		toSerialize["supplier_notes"] = o.SupplierNotes
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationOrder struct {
	value *IntegrationOrder
	isSet bool
}

func (v NullableIntegrationOrder) Get() *IntegrationOrder {
	return v.value
}

func (v *NullableIntegrationOrder) Set(val *IntegrationOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationOrder(val *IntegrationOrder) *NullableIntegrationOrder {
	return &NullableIntegrationOrder{value: val, isSet: true}
}

func (v NullableIntegrationOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


